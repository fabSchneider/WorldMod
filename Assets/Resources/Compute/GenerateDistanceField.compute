#pragma kernel PrepareMask
#pragma kernel DistancePass
#pragma kernel NormalizeDistance

RWTexture2D<float> Mask;
RWTexture2D<float> SqrDistanceField;
RWStructuredBuffer<int> ChangedFlag;
int2 passOffest;
int iterationCount;
int2 resolution;

int maxIteration;

[numthreads(8, 8, 1)]
void PrepareMask(uint3 id : SV_DispatchThreadID)
{
	if (Mask[id.xy] > 0)
	Mask[id.xy] = 0;
	else
	Mask[id.xy] = 999999999999999999.9;
}

[numthreads(8, 8, 1)]
void DistancePass(uint3 id : SV_DispatchThreadID)
{
	//float2 offA = float2((resolution.x + id.x - passOffest.x) % resolution.x, clamp(id.y - passOffest.y, 0, resolution.y - 1));
	//float adjacentDstA = SqrDistanceField[offA];
	//float2 offB = float2((resolution.x + id.x + passOffest.x) % resolution.x, clamp(id.y + passOffest.y, 0, resolution.y - 1));
	//float adjacentDstB = SqrDistanceField[offB];

	float adjacentDstA = SqrDistanceField[(resolution + id.xy - passOffest) % resolution];
	float adjacentDstB = SqrDistanceField[(resolution + id.xy + passOffest) % resolution];

	float sqrDst = min(adjacentDstA, adjacentDstB) + iterationCount * 2 + 1;

	if (sqrDst < SqrDistanceField[id.xy]) {
		SqrDistanceField[id.xy] = sqrDst;
		InterlockedAdd(ChangedFlag[0], 1);
	}
}

[numthreads(8, 8, 1)]
void NormalizeDistance(uint3 id : SV_DispatchThreadID)
{
	int maxRes = max(resolution.x, resolution.y);
	SqrDistanceField[id.xy] = SqrDistanceField[id.xy];
}
